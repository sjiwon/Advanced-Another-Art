name: Frontend CD

on:
  push:
    branches:
      - main-x
    paths:
      - frontend/**

env:
  SUBMODULE_TOKEN: ${{ secrets.SUBMODULE_TOKEN }}
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ZIP_FILE: spring-build-${{ github.run_number }}.zip
  S3_BUCKET: ${{ secrets.FRONTEND_S3_BUCKET }}
  S3_DEPLOY_RESOURCE_FOLDER: ${{ secrets.FRONTEND_S3_DEPLOY_RESOURCE_FOLDER }}

jobs:
  build-and-deploy:
    name: Frontend Build & Deploy
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Repository를 가져온다
        uses: actions/checkout@v3
        with:
          token: ${{ env.SUBMODULE_TOKEN }}
          submodules: true

      - name: node_modules 캐싱 여부를 확인한다
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: npm install을 진행한다 (캐싱된 경우 pass)
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: echo 'npm cache missed!' && npm install -f

      - name: Build를 진행한다
        run: npm run build
      
      - name: AWS 인증을 진행한다
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ env.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build File을 S3로 전송한다
        run: |
          aws s3 cp --recursive --region ${{ env.AWS_REGION }} ./frontend/dist s3://${{ env.FRONTEND_S3_BUCKET }}/${{ env.FRONTEND_S3_DEPLOY_RESOURCE_FOLDER }}
