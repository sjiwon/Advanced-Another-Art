buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id "java"
    id "org.springframework.boot" version "3.1.5"
    id "io.spring.dependency-management" version "1.1.3"
}

group = "com.sjiwon"
version = "0.0.1-SNAPSHOT"

java {
    sourceCompatibility = "17"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Web
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    // Spring Security
    implementation "org.springframework.boot:spring-boot-starter-security"

    // JPA & DB
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    runtimeOnly "com.mysql:mysql-connector-j"

    // Flyway
    implementation "org.flywaydb:flyway-core"
    implementation "org.flywaydb:flyway-mysql"

    // Querydsl
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Mail
    implementation "org.springframework.boot:spring-boot-starter-mail"

    // Redis
    implementation "org.springframework.boot:spring-boot-starter-data-redis"

    // AWS
    implementation "io.awspring.cloud:spring-cloud-aws-starter:3.0.1"
    implementation "io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.1"
    implementation "ca.pjer:logback-awslogs-appender:1.6.0" // CloudWatch Logging with Logback

    // JWT
    implementation "io.jsonwebtoken:jjwt-api:0.11.5"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.11.5"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.11.5"

    // Monitoring
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    runtimeOnly "io.micrometer:micrometer-registry-prometheus"

    // Swagger
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0"

    // Lombok
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"

    // Slack API
    implementation "com.slack.api:slack-api-client:1.29.2"

    // Guava
    implementation "com.google.guava:guava:32.1.1-jre"

    // p6spy
    implementation "com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0"

    // Test
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"

    // RestAssured (E2E Test)
    testImplementation "io.rest-assured:rest-assured:5.3.2"

    // TestContainers
    testImplementation "org.springframework.boot:spring-boot-testcontainers"
    testImplementation "org.testcontainers:junit-jupiter"
    testImplementation "org.testcontainers:mysql:1.18.3"
    testImplementation "org.flywaydb.flyway-test-extensions:flyway-spring-test:9.5.0"
}

// QueryDsl QClass Generated Position
def qTypeGeneratedPosition = "src/main/generated"

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(qTypeGeneratedPosition))
}

// add QueryDsl QClass to Java Source Set
sourceSets {
    main.java.srcDirs += [qTypeGeneratedPosition]
}

// delete QueryDsl QClass
clean {
    delete file(qTypeGeneratedPosition)
}

tasks.named("test") {
    useJUnitPlatform()
}

tasks.named('compileJava') {
    inputs.files(tasks.named('processResources'))
}

processResources.dependsOn('copySecret')

tasks.register('copySecret', Copy) {
    from './another-art-secret'
    include 'application*.yml'
    into './src/main/resources'
}

jar {
    enabled = false
}

bootJar {
    archivesBaseName = "AnotherArt"
    archiveFileName = "AnotherArt.jar"
    archiveVersion = "0.0.1"
}
